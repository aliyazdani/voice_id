module RequestHelpers
  class AudioFileNotProvidedError < StandardError; end
  
  def return_request_with_headers(request, headers)
    return request if headers.empty?
    headers = headers.merge(@headers)

    headers.each do |k, v|
      request[k] = v
    end

    request
  end

  # params
  #   method - required
  #     a valid HTTP method { Symbol }
  #   uri - required
  #     a uri object generated by #generate_uri
  #   headers - required
  #     valid headers as required by api { Hash } (ex. "Content-Type" => "application/json")
  # 
  # returns
  #   a Net::HTTP request object with headers
  def generate_request(method, uri, headers, multipart=false, audio_file_path="")
    if multipart
      raise AudioFileNotProvidedError, "a valid audio file path required" if audio_file_path.empty?
      request = nil
      File.open(audio_file_path) do |audio|
        request = Net::HTTP::Post::Multipart.new uri.path,
          { "file" => UploadIO.new(audio, "audio/wav", "audio.wav")},
          @headers.merge(headers)
        yield request
      end
    else
      request_uri = uri.request_uri
      case method
      when :Get
        request = Net::HTTP::Get.new(request_uri)
      when :Post
        request = Net::HTTP::Post.new(request_uri)
      when :Delete
        request = Net::HTTP::Delete.new(request_uri)
      end
      return_request_with_headers(request, headers)
    end
  end

  # def send_request(uri, request)
  #   Net::HTTP.start(uri.host, uri.port, :use_ssl => @use_ssl) do |http|
  #       http.request(request)
  #   end
  # end

  def send_request(path, method, req_headers, body)
    _headers =  req_headers ? headers.merge(req_headers) : headers
    _path = @api_base_url + path
    req = HTTP.headers(_headers)
    case method
    when :Post
      if _headers["Content-Type"] == "application/json"
        body ? req.post(_path, body) : req.post(_path)
      else
        req.post(_path, body)
      end
    when :Get
      req.get(_path)
    when :Delete
      req.delete(_path)
    end
  end

  # params
  #   path - required
  #     a valid endpoint { String } (ex: "/identificationProfiles")
  #   query_options - optional
  #     request_options { Hash } (ex: { "shortAudio" => "true" })
  #
  # returns
  #   uri object
  def generate_uri(path, query_options={}, encode)
    return URI(@api_base_url + path) unless encode
    url       = @api_base_url + path
    uri       = URI(url)
    uri.query = URI.encode_www_form(query_options)

    uri
  end

end