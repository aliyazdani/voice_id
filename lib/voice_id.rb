#--
# Copyright (c) 2016- Ali Yazdani <aliyazdani82@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#++

require 'net/http'
require 'net/http/post/multipart'
require 'json'
require 'pry'

class VoiceId
  class AudioFileNotProvidedError < StandardError; end

  attr_reader :api_base_url, :api_key, :api_version, :headers, :use_ssl
  def initialize(api_key)
    @api_version  = "v1.0"
    @api_key      = api_key
    @use_ssl      = true
    @api_base_url = "https://api.projectoxford.ai/spid/#{@api_version}"
    @headers      = { "Ocp-Apim-Subscription-Key" => api_key }
  end

  def return_request_with_headers(request, headers)
    return request if headers.empty?
    headers = headers.merge(@headers)

    headers.each do |k, v|
      request[k] = v
    end

    request
  end

  # params
  #   method - required
  #     a valid HTTP method { Symbol }
  #   uri - required
  #     a uri object generated by #generate_uri
  #   headers - required
  #     valid headers as required by api { Hash } (ex. "Content-Type" => "application/json")
  # 
  # returns
  #   a Net::HTTP request object with headers
  def generate_request(method, uri, headers, multipart=false, audio_file_path="")
    if multipart
      raise AudioFileNotProvidedError, "a valid audio file path required" if audio_file_path.empty?
      request = nil
      File.open(audio_file_path) do |audio|
        request = Net::HTTP::Post::Multipart.new uri.path,
          { "file" => UploadIO.new(audio, "audio/wav", "audio.wav")},
          @headers.merge(headers)
        yield request
      end
    else
      request_uri = uri.request_uri
      case method
      when :Get
        request = Net::HTTP::Get.new(request_uri)
      when :Post
        request = Net::HTTP::Post.new(request_uri)
      when :Delete
        request = Net::HTTP::Delete.new(request_uri)
      end
      return_request_with_headers(request, headers)
    end
  end

  def send_request(uri, request)
    Net::HTTP.start(uri.host, uri.port, :use_ssl => @use_ssl) do |http|
        http.request(request)
    end
  end

  # params
  #   path - required
  #     a valid endpoint { String } (ex: "/identificationProfiles")
  #   query_options - optional
  #     request_options { Hash } (ex: { "shortAudio" => "true" })
  #
  # returns
  #   uri object
  def generate_uri(path, query_options={})
    url       = @api_base_url + path
    uri       = URI(url)
    uri.query = URI.encode_www_form(query_options)

    uri
  end

  # Microsoft API response
  # 200 Response 
  # {
  #   "identificationProfileId": "49a36324-fc4b-4387-aa06-090cfbf0064f",
  # }
  #
  # 500 Response
  # {
  #   "error":{
  #     "code" : "InternalServerError",
  #     "message" : "SpeakerInvalid",
  #   }
  # }
  #
  # returns
  #   200 - success
  #     new profileId { Hash }
  #   500 - error
  #     false (indicating new profile was not created)
  def create_profile
    path         = "/identificationProfiles"
    method       = :Post
    headers      = { "Content-Type" => "application/json" }
    body         = { locale: "en-us" }
    uri          = generate_uri(path)
    request      = generate_request(method, uri, headers)
    request.body = body.to_json
    response     = send_request(uri, request)
    
    response.code == '200' ? JSON.parse(response.body) : false
  end

  # params
  #   id - required
  #     a valid id { String }
  #
  # Microsoft API response
  # 200 Response
  # "" (empty string)
  # 
  # 500 Response
  #    {
  #      "error": {
  #        "code" : "InternalServerError",
  #        "message" : "SpeakerInvalid", 
  #      }
  #   }
  #
  # returns
  #   200 - success
  #     profile id that was deleted { String }
  #   500 - error
  #     false (indicating delete of id failed)
  def delete_profile(profileId)
    path     = "/identificationProfiles/#{profileId}"
    method   = :Delete
    headers  = { "Content-Type" => "application/json" }
    uri      = generate_uri(path)
    request  = generate_request(method, uri, headers)
    response = send_request(uri, request)

    response.code == '200' ? profileId : false
  end

  # Microsoft API response
  # 200 Response
  #   [
  #     {
  #       "identificationProfileId" : "111f427c-3791-468f-b709-fcef7660fff9",
  #       "locale" : "en-US",
  #       "enrollmentSpeechTime", 0.0
  #       "remainingEnrollmentSpeechTime" : 0.0,
  #       "createdDateTime" : "2015-04-23T18:25:43.511Z",
  #       "lastActionDateTime" : "2015-04-23T18:25:43.511Z",
  #       "enrollmentStatus" : "Enrolled" //[Enrolled | Enrolling | Training]
  #     }, 
  #   â€¦]
  # 
  # 500 Response
  #    {
  #      "error": {
  #        "code" : "InternalServerError",
  #        "message" : "SpeakerInvalid", 
  #      }
  #   }
  #
  # returns
  #   200 - success
  #     A list of all the profiles { Array }
  #   500 - error
  #     false (indicating delete of id failed)
  def get_all_profiles
    path     = '/identificationProfiles'
    method   = :Get
    headers  = { "Content-Type" => "application/json" }
    uri      = generate_uri(path)
    request  = generate_request(method, uri, headers)
    response = send_request(uri, request)

    response.code == '200' ? JSON.parse(response.body) : false
  end

  # params
  #   profileId
  #     a valid profileId { String }
  # Microsoft API response
  # 200 Response
  #   {
  #     "identificationProfileId" : "111f427c-3791-468f-b709-fcef7660fff9",
  #     "locale" : "en-US",
  #     "enrollmentSpeechTime", 0.0
  #     "remainingEnrollmentSpeechTime" : 0.0,
  #     "createdDateTime" : "2015-04-23T18:25:43.511Z",
  #     "lastActionDateTime" : "2015-04-23T18:25:43.511Z",
  #     "enrollmentStatus" : "Enrolled" //[Enrolled | Enrolling | Training]
  #   }
  # 
  # 500 Response
  #    {
  #      "error": {
  #        "code" : "InternalServerError",
  #        "message" : "SpeakerInvalid", 
  #      }
  #   }
  #
  # returns
  #   200 - success
  #     a profile { Hash }
  #   500 - error
  #     false (indicating delete of id failed)
  def get_profile(profileId)
    path     = "/identificationProfiles/#{profileId}"
    method   = :Get
    headers  = { "Content-Type" => "application/json" }
    uri      = generate_uri(path)
    request  = generate_request(method, uri, headers)
    response = send_request(uri, request)

    response.code == '200' ? JSON.parse(response.body) : false
  end

  def create_enrollment(profileId, shortAudio, audio_file_path)
    path = "/identificationProfiles/#{profileId}/enroll"
    method = :Post
    headers = { "Content-Type" => "multipart/form-data" }
    query_options = { "shortAudio" => shortAudio }
    uri     = generate_uri(path, query_options)
    multipart = true
    generate_request(method, uri, headers, multipart, audio_file_path) do |request|
      response = send_request(uri, request)
      # api returns url of enrollment status in response headers
      response.code == '202' ? response.to_hash['operation-location'].first : false
    end
  end

end

api_key = ENV['ms_api_key']
v = VoiceId.new(ms_api_key)
# p v.create_profile
# p v.delete_profile("6c7c204e-15fd-487b-829a-3a48edf7105a")
# p v.get_all_profiles
# p v.get_profile("8f612c3c-bd13-4b0b-98af-6fef88d58583")
p v.create_enrollment("8f612c3c-bd13-4b0b-98af-6fef88d58583", "true", "/Users/aliyazdani/Desktop/joey_converted.wav")